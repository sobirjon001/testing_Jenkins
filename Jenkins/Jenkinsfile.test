pipeline {
    agent any

    tools {
        dockerTool 'docker'
    }

    parameters {
        choice name: 'NODES', choices: ['1', '2', '3', '4', '5', '6'], description: 'Number of parallel nodes'
        string name: 'TAGS', defaultValue: '@Test and @UI', description: 'Example: @One and @Two and not (@Three or @Four)'
        password name: 'ENV_PARAMS', defaultValue: 'ONE=one_value TWO=two_value one_more_three_value FOUR=#four_value #FIVE=five_value SIX', description: 'Please copy/past user logins'
        choice name: 'BROWSER_TYPE', choices: ['chrome', 'firefox'], description: 'Desired browser'
        text name: 's3files', defaultValue: '''s3://one/two/three*.csv''', description: 's3 bucket files to download'
    }
    environment {
        THREE = "THREE_value"
        ENV = "${ENV_PARAMS}"
        browser = "remote:$BROWSER_TYPE"
    }

    stages {
        stage('clone repo') {
            steps {
                cleanWs()
                git 'https://github.com/sobirjon001/testing_Jenkins.git'
            }
        }
        stage('downloading s3 files') {
            steps {
//                sh '''
//                    for line in $s3files; do
//                        echo "file content of '$line'" >>> src/test/resources/downloads/test_file.txt
//                    done
//                '''
                writeFile file: 'src/test/resources/downloads/test_file.txt', text: "$s3files"
            }
        }
        stage('ENV print') {
            steps {
                echo "ENV:\n $ENV"
                echo "ENV_2:\n ${params.ENV}"
            }
        }
        stage('Env print') {
            steps {
                echo "ONE = ${env.ONE}"
                echo "TWO = ${env.TWO}"
                echo "THREE = ${env.THREE}"
            }
        }
        stage('Build') {
            steps {
                sh 'docker build -t my_framework -f Jenkins/Dockerfiles/Dockerfile.test .'
            }
        }
        stage('Deploy selenium grid') {
            steps {
                sh '''
                    docker network create grid
                    docker run -d --net grid -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.15.0-20231122
                    docker run -d --net grid -p 5900:5900 --name node-$BROWSER_TYPE \
                        --shm-size="2g" \
                        -e SE_EVENT_BUS_HOST=selenium-hub \
                        -e SE_EVENT_BUS_PUBLISH_PORT=4442 \
                        -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \
                        selenium/node-$BROWSER_TYPE:4.15.0-20231122
                '''
            }
        }
        stage('Deploy and Test') {
            steps {
                sh '''
                    mkdir results || true
                    chmod 777 results
                    mkdir downloads || true
                    docker run -t --name my_framework \
                        --net grid \
                        -e TAGS \
                        -e NODES \
                        -e THREE \
                        -e ENV \
                        -v $(pwd)/results:/var/src/app/results \
                        -v $(pwd)/downloads:/var/src/app/downloads \
                        my_framework \
                        mvn verify
                '''
            }
        }
    }
    post {
        always {
//            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'results/cucumber-html-reports', reportFiles: 'overview-features.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'results/cucumber-html-reports', reportFiles: 'overview-features.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
            sh '''
                docker rm $(docker stop selenium-hub)
                docker rm $(docker stop node-$BROWSER_TYPE)
                docker rm $(docker stop my_framework)
                docker rmi my_framework
                docker network rm grid
            '''
        }
    }
}
